type Chapter {
  content: String
  createdAt: String!
  name: String!
}

type Course {
  chapters: [Chapter!]
  createdAt: String!
  name: String!
  rating: Float!
  ratings: [Rating!]
  teachers: [User!]
}

"""
Autogenerated return type of CreateRating
"""
type CreateRatingPayload {
  rating: Rating!
}

type Mutation {
  addRating(rating: RatingInputObject!): CreateRatingPayload
}

union NotifiableUnion = Chapter | Course

type Notification {
  action: String!
  notifiable: NotifiableUnion!
}

type Query {
  """
  Query all Courses
  """
  courses: [Course!]!

  """
  Query all Notifications
  """
  notifications: [Notification!]!

  """
  Query a Player
  """
  user(id: ID!): User!

  """
  Query all Users
  """
  users: [User!]!
}

type Rating {
  course: Course!
  id: Int!
  score: Int!
}

input RatingInputObject {
  courseId: ID!
  score: Int!
}

type User {
  courses: [Course!]
  email: String!
  id: ID!
  isTeacher: Boolean! @deprecated(reason: "Simplified")
  name: String!
  teacher: Boolean!
}